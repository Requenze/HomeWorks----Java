public class MyLinkedList<E> {
    private class Node {
        public E element;
        public Node next;
        public Node(E element) {
            this.element = element;
            next = null;
        }
        public Node(E element, Node next) {
            this.element = element;
            this.next = next;
        }
    }

    private int size;
    private Node head;
    public MyLinkedList() {
        size = 0;
        head = null;
    }
    private Node getNode(int index) {
        if (index < 0 || index >= size) throw new IndexOutOfBoundsException();
        Node node = head;
        for (int i = 0; i < index; i++) {
            node = node.next;
        }
        return node;
    }
    public E get(int index) {
        Node node = getNode(index);
        return node.element;
    }
    public int indexOf(Object obj) {
        Node node = head;
        for (int i = 0; i < size; i++) {
            if (obj.equals(node.element)) return i;
            node = node.next;
        }
        return -1;
    }
    public boolean add(E element) {
        if (size == 0) {
            head = new Node(element);
        } else {
            Node node = head;
            while (node.next != null) {
                node = node.next;
            }
            node.next = new Node(element);
        }
        size++;
        return true;
    }
    public void add(int index, E element) {
        if (index < 0 || index > size) throw new IndexOutOfBoundsException();
        if (index == 0) {
            head = new Node(element, head);
        } else {
            Node node = getNode(index - 1);
            node.next = new Node(element, node.next);
        }
        size++;
    }
    public E remove(int index) {
        if (index < 0 || index >= size) throw new IndexOutOfBoundsException();
        Node node;
        if (index == 0) {
            node = head;
            head = head.next;
        } else {
            Node prev = getNode(index - 1);
            node = prev.next;
            prev.next = node.next;
        }
        node.next = null;
        size--;
        return node.element;
    }
    public boolean remove(Object obj) {
        int index = indexOf(obj);
        if (index != -1) {
            remove(index);
            return true;
        }
        return false;
    }
    @Override
    public String toString() {
        if (size == 0) return "[]";
        StringBuilder result = new StringBuilder("[");
        Node node = head;
        while (node != null) {
            result.append(node.element);
            if (node.next != null) result.append(", ");
            node = node.next;
        }
        result.append("]");
        return result.toString();
    }

    public static void main(String[] args) {
        MyLinkedList<String> linkedList = new MyLinkedList<>();
        linkedList.add(0, "test");
        linkedList.add(1, "hello");
        linkedList.add(2, "world");

        System.out.println(linkedList);

        linkedList.remove(1);
        System.out.println(linkedList);

        linkedList.remove("test");
        System.out.println(linkedList);

        linkedList.add("test");
        System.out.println(linkedList);

        linkedList.add(1, "hello");
        System.out.println(linkedList);
    }
}
